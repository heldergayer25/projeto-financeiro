package br.com.financeiro.pojo;

// default package
// Generated 10/11/2014 22:21:36 by Hibernate Tools 4.0.0

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.Length;

/**
 * Empresa generated by hbm2java
 */
@Entity
@Table(name = "empresa")
public class Empresa implements java.io.Serializable {
	
	private static final long serialVersionUID = 1L;

	private Integer id;
	private String razao;
	private String fantasia;
	private String cpfCnpj;
	private String ie;
	private String im;
	private boolean ativo;
	private Set<Usuario> usuarios = new HashSet<>(0);
	private Set<ContaBancaria> contaBancarias = new HashSet<>(0);
	private Set<Contato> contatos = new HashSet<>(0);
	private Set<PlanoDeContas> planoDeContases = new HashSet<>(0);
	private Set<Endereco> enderecos = new HashSet<>(0);
	
	private boolean selecionado;

	public Empresa() {
	}

	public Empresa(String razao, String cpfCnpj, boolean ativo) {
		this.razao = razao;
		this.cpfCnpj = cpfCnpj;
		this.ativo = ativo;
	}

	public Empresa(String razao, String fantasia, String cpfCnpj, String ie,
			String im, boolean ativo, Set<Usuario> usuarios, Set<ContaBancaria> contaBancarias,
			Set<Contato> contatos, Set<PlanoDeContas> planoDeContases, Set<Endereco> enderecos) {
		this.razao = razao;
		this.fantasia = fantasia;
		this.cpfCnpj = cpfCnpj;
		this.ie = ie;
		this.im = im;
		this.ativo = ativo;
		this.usuarios = usuarios;
		this.contaBancarias = contaBancarias;
		this.contatos = contatos;
		this.planoDeContases = planoDeContases;
		this.enderecos = enderecos;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "razao", nullable = false, length = 300)
	@NotNull
	@Length(max = 300, message = "A Razão Social não pode ter mais que 300 caracteres!")
	public String getRazao() {
		return this.razao;
	}

	public void setRazao(String razao) {
		this.razao = razao;
	}

	@Column(name = "fantasia", length = 200)
	@Length(max = 200, message = "O Nome Fantasia não pode ter mais que 200 caracteres!")
	public String getFantasia() {
		return this.fantasia;
	}

	public void setFantasia(String fantasia) {
		this.fantasia = fantasia;
	}

	@Column(name = "cpf_cnpj", nullable = false, length = 14)
	@NotNull
	@Length(max = 14, min = 11, message = "CPF/CNPJ deve ter entre 11 e 14 números")
	public String getCpfCnpj() {
		return this.cpfCnpj;
	}

	public void setCpfCnpj(String cpfCnpj) {
		this.cpfCnpj = cpfCnpj;
	}

	@Column(name = "ie", length = 8)
	@Length(max = 8, message = "A Inscrição Estadual não pode ter mais que 8 caracteres!")
	public String getIe() {
		return this.ie;
	}

	public void setIe(String ie) {
		this.ie = ie;
	}

	@Column(name = "im", length = 8)
	@Length(max = 8, message = "A Inscrição Municipal não pode ter mais que 8 caracteres!")
	public String getIm() {
		return this.im;
	}

	public void setIm(String im) {
		this.im = im;
	}

	@Column(name = "ativo", nullable = false)
	@NotNull
	public boolean isAtivo() {
		return this.ativo;
	}

	public void setAtivo(boolean ativo) {
		this.ativo = ativo;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "usuario_has_empresa", joinColumns = { @JoinColumn(name = "empresa_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "usuario_id", nullable = false, updatable = false) })
	public Set<Usuario> getUsuarios() {
		return this.usuarios;
	}

	public void setUsuarios(Set<Usuario> usuarios) {
		this.usuarios = usuarios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "empresa")
	public Set<ContaBancaria> getContaBancarias() {
		return this.contaBancarias;
	}

	public void setContaBancarias(Set<ContaBancaria> contaBancarias) {
		this.contaBancarias = contaBancarias;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "empresa")
	public Set<Contato> getContatos() {
		return this.contatos;
	}

	public void setContatos(Set<Contato> contatos) {
		this.contatos = contatos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "empresa")
	public Set<PlanoDeContas> getPlanoDeContases() {
		return this.planoDeContases;
	}

	public void setPlanoDeContases(Set<PlanoDeContas> planoDeContases) {
		this.planoDeContases = planoDeContases;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "empresa")
	public Set<Endereco> getEnderecos() {
		return this.enderecos;
	}

	public void setEnderecos(Set<Endereco> enderecos) {
		this.enderecos = enderecos;
	}

	@Transient
	public boolean isSelecionado() {
		return selecionado;
	}

	public void setSelecionado(boolean selecionado) {
		this.selecionado = selecionado;
	}

}
